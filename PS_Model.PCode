/*
-----------------------------------------------------------------------------------
 
  Sandy T, 14/07/2025
  New Class/methods for fetching in rows and getting count from any record, also added another helper function that returns data type of any field
-----------------------------------------------------------------------------------
*/
class PS_Model;
   
   method GetCount(&tableName As Record, &filters As array of array of string, &fieldName As string) Returns number;
   method FetchRowsFromTable(&filters As array of array of string, &orderByFields As array of string, &selectFields As array of string, &recName As string) Returns array of Record;
   method GetDateType(&fieldName As string) Returns string;
   method BuildWhereClause(&key As string, &op As string, &paramIndex As integer, &val As any) Returns string;
   method BuildWhereClauseFromFilters(&filters As array of array of string, &paramIndex As integer, &bindValues As array of any) Returns string;
   method FormatClauseForOperator(&key As string, &op As string, &val As any, &dataType As string, &paramIndex As integer) Returns string;
   method FormatInClause(&val As any, &dataType As string) Returns string;
   method FormatSingleValue(&val As any, &dataType As string, &operator As string) Returns string;
   method BuildBindValues(&bindValues As array of any, &lTempArry As array of any);
   
end-class;

/**
 * GetCount
 *
 * Returns the count of records from a specified PeopleSoft table based on dynamic filters.
 *
 * @param Record $tableName   The record object representing the table to query.
 * @param array[][] $filters  A 2D array of filters where each filter is [fieldName, operator, value].
 * @param string $fieldName   The field to count; if empty, default to COUNT(*).
 *
 * @return number             The count of matching records.
 */

method GetCount
   /+ &tableName as Record, +/
   /+ &filters as Array2 of String, +/
   /+ &fieldName as String +/
   /+ Returns Number +/
   
   Local string &countExpr, &sqlText, &whereClause;
   Local number &count, &i, &paramIndex;
   Local array of any &bindValues;
   Local string &dataType;
   Local array of any &lTempArray = CreateArrayAny(&tableName);
   /* Use COUNT(fieldName) or COUNT(*) */
   If All(&fieldName) Then
      &countExpr = &fieldName;
   Else
      &countExpr = "*";
   End-If;
   
   /* Base SQL */
   &sqlText = "SELECT COUNT(" | &countExpr | ") FROM %TABLE(:1) b";
   
   /* Build WHERE clause */
   &bindValues = CreateArray();
   &paramIndex = 2;
   If &filters.Len > 0 Then
      &whereClause = " WHERE " | %This.BuildWhereClauseFromFilters(&filters, &paramIndex, &bindValues);
      
   End-If;
   &sqlText = &sqlText | &whereClause;
   
   /* Pass all bind values to SQL */
   %This.BuildBindValues(&bindValues, &lTempArray);
   
   
   /* Run the query */
   Local SQL &sql = GetSQL(&sqlText, &lTempArray);
   If &sql.Fetch(&count) Then
      Return &count;
   Else
      Return 0;
   End-If;
end-method;


/**
 * FetchRowsFromTable
 *
 * Retrieves rows from a specified PeopleSoft record using dynamic filters and optional ordering.
 *
 * @param array[][] $filters        A 2D array of filters where each filter is [fieldName, value].
 * @param array $orderByFields      An array of field names to order the results by.
 * @param array $selectFields       An array of field names to select (currently unused).
 * @param string $recName           The name of the record to query.
 *
 * @return array<Record>            An array of Record objects matching the filter criteria.
 */
method FetchRowsFromTable
   /+ &filters as Array2 of String, +/
   /+ &orderByFields as Array of String, +/
   /+ &selectFields as Array of String, +/
   /+ &recName as String +/
   /+ Returns Array of Record +/
   
   
   Local SQL &sql;
   Local string &whereClause = "";
   Local string &orderClause = "";
   Local string &selectClause = "";
   Local array of any &bindValues;
   
   Local string &key, &op;
   Local any &value;
   Local integer &i, &j;
   Local integer &paramIndex = 2;
   
   
   &recName = "RECORD." | &recName;
   Local Record &lRecSelect = CreateRecord(@&recName);
   Local array of Record &resultRows = CreateArrayRept(&lRecSelect, 0);
   
   Local Row &row;
   Local integer &k;
   Local array of any &lTempArry = CreateArrayAny(&lRecSelect);
   &bindValues = CreateArray();
   
   /* Early exit if no filters provided */
   If &filters.Len = 0 Then
      Return &resultRows;
   End-If;
   
   /* Build SELECT clause -- Functional but not in use at the moment  : This is future @TODO  for this function 

   If &selectFields.Len > 0 Then
      For &i = 1 To &selectFields.Len
         If &i > 1 Then
            &selectClause = &selectClause | ", ";
         End-If;
         &selectClause = &selectClause | "b." | RTrim(LTrim(&selectFields [&i]));
      End-For;
   Else
      &selectClause = "b.*";
   End-If;
   */
   /* Build WHERE clause from map keys and values */
   
   &whereClause = " WHERE " | %This.BuildWhereClauseFromFilters(&filters, &paramIndex, &bindValues);
   
   &i = 1;
   /* Build ORDER BY clause if provided */
   If &orderByFields.Len > 0 Then
      &orderClause = " ORDER BY ";
      For &i = 1 To &orderByFields.Len
         If &i > 1 Then
            &orderClause = &orderClause | ", ";
         End-If;
         &orderClause = &orderClause | "b." | LTrim(RTrim(&orderByFields [&i]));
      End-For;
   End-If;
   
   
   
   /* Prepare SQL Bind Values */
   
   %This.BuildBindValues(&bindValues, &lTempArry);
   
   
   /* Future scope, is to make dynamic select as per sql clause but for now, we will just select *
   Local string &lSqlStr = "SELECT " | &selectClause | " FROM ps_gu_config_data b WHERE " | &whereClause | &orderClause;
   */
   &sql = GetSQL("SELECT * from %TABLE(:1)  b  " | &whereClause | &orderClause, &lTempArry);
   
   /* Fetch rows correctly 
    Had to copy record because it was replacing value by default, took me some time to figure that out as thats what peopelsoft default behaviour is.
   */
   While &sql.Fetch(&lRecSelect)
      Local Record &copyRec = CreateRecord(@&recName);
      For &i = 1 To &copyRec.FieldCount
         &copyRec.GetField(&i).Value = &lRecSelect.GetField(&i).Value;
      End-For;
      
      &resultRows.Push(&copyRec);
   End-While;
   
   /* Optional: log or throw if no results */
   If &resultRows.Len = 0 Then
      MessageBox(0, "", 0, 0, "No result found for record : " | &recName);
   End-If;
   
   
   Return &resultRows;
   
end-method;



/**
 * GetDateType
 * 
 * @param string $fieldName
 * @return string
 */


method GetDateType
   /+ &fieldName as String +/
   /+ Returns String +/
   
   Local Record &recordField = CreateRecord(Record.PSDBFIELD);
   &recordField.FIELDNAME.Value = &fieldName;
   If &recordField.SelectByKey() Then
      
      /*
		0=Character
		1=Long Character
		2=Number
		3=Signed Number
		4=Date
		5=Time
		6=DateTime
		8=Image / Attachment
		9=Image Reference
	*/
      Evaluate &recordField.FIELDTYPE.Value
      When = 0
         Return "Character";
         Break;
         
      When = 1
         Return "Long Character";
         Break;
         
      When = 2
         Return "Number";
         Break;
         
      When = 3
         Return "Signed Number";
         Break;
         
      When = 4
         Return "Date";
         Break;
         
      When = 5
         Return "Time";
         Break;
         
      When = 6
         Return "DateTime";
         Break;
         
      When = 8
         Return "Image / Attachment";
         Break;
         
      When = 9
         Return "Image Reference";
         Break;
         
      When-Other
         Return "Other";
         Break;
         
      End-Evaluate;
   End-If;
end-method;


/** 
 * BuildWhereClause
 * Constructs a SQL WHERE clause "condition" based on the data type of the field.
 *
 * @param string &key         The field name to filter on.
 * @param string &op          The SQL operator (e.g., =, <, >).
 * @param integer &paramIndex The bind parameter index.
 * @return string             The constructed WHERE clause fragment.
 */

method BuildWhereClause
   /+ &key as String, +/
   /+ &op as String, +/
   /+ &paramIndex as Integer, +/
   /+ &val as Any +/
   /+ Returns String +/
   Local string &clause;
   Local string &dataType = %This.GetDateType(&key);
   
   Evaluate &dataType
   When = "Date"
      &clause = "b." | &key | " " | &op | " %DATEIN(:" | &paramIndex | " ) ";
   When = "Time"
      &clause = "b." | &key | " " | &op | " %TIMEIN(:" | &paramIndex | " ) ";
   When = "DateTime"
      &clause = "b." | &key | " " | &op | " %DATETIMEIN(:" | &paramIndex | " ) ";
   When-Other
      /* sandy change */
      If Upper(LTrim(RTrim(&op))) = "IN" Then
         &clause = "b." | &key | " " | &op | " " | &val;
         
      Else
         &clause = "b." | &key | " " | &op | " :" | &paramIndex;
      End-If;
      /* sandy change */
      
      
      
   End-Evaluate;
   
   Return &clause;
end-method;


/**
 * BuildWhereClauseFromFilters
 * Builds a complete WHERE clause from a list of filters and populates bind values.
 *
 * @param array &filters      Array of filters, each being an array of 2 or 3 elements.
 * @param integer &paramIndex Bind parameter index (passed by reference).
 * @param array &bindValues   Array to collect bind values (passed by reference).
 * @return string             The full WHERE clause string (without the "WHERE" keyword).
 */

method BuildWhereClauseFromFilters
   /+ &filters as Array2 of String, +/
   /+ &paramIndex as Integer, +/
   /+ &bindValues as Array of Any +/
   /+ Returns String +/
   Local string &whereClause = "";
   
   Local string &key, &op;
   Local any &val;
   Local integer &i;
   
   For &i = 1 To &filters.Len
      &key = LTrim(RTrim(&filters [&i][1]));
      If &filters [&i].Len >= 3 Then
         &op = Upper(LTrim(RTrim(&filters [&i][2])));
         &val = LTrim(RTrim(&filters [&i][3]));
      Else
         &op = "=";
         &val = LTrim(RTrim(&filters [&i][2]));
      End-If;
      
      If &i > 1 Then
         &whereClause = &whereClause | " AND ";
      End-If;
      
      &whereClause = &whereClause | %This.FormatClauseForOperator(&key, &op, &val, %This.GetDateType(&key), &paramIndex);
      If Upper(LTrim(RTrim(&op))) <> "IN" Then /* No need to put bind value for IN as we are passing IN as string directly in where clause, peoplecode doesnt support dynamic IN binding for more than 1 value */
         &bindValues.Push(&val); /* This works because &bindValues is passed by-reference */
         &paramIndex = &paramIndex + 1;
      End-If;
   End-For;
   Return &whereClause;
end-method;


/**
 * Builds a SQL clause string based on the operator and value provided.
 *
 * This method dynamically constructs SQL clauses for supported operators such as IN and BETWEEN.
 * It uses helper methods FormatInClause and FormatSingleValue to format values appropriately.
 * For unsupported or custom operators, it defaults to a standard field/operator/value format.
 *
 * @param String &key The field name to be used in the clause.
 * @param String &op The SQL operator (e.g., "IN", "BETWEEN", "=", etc.).
 * @param Any &val The value or values to be used in the clause.
 * @param String &dataType The data type of the value ("Date", "Time", "DateTime", or other).
 * @param Integer &paramIndex The index used for bind variable formatting in non-IN/BETWEEN cases.
 * @return String A formatted SQL clause string.
 */

method FormatClauseForOperator
   /+ &key as String, +/
   /+ &op as String, +/
   /+ &val as Any, +/
   /+ &dataType as String, +/
   /+ &paramIndex as Integer +/
   /+ Returns String +/
   
   Local string &clause;
   Local string &fieldRef = "b." | &key;
   
   Evaluate Upper(&op)
   When "IN"
      &clause = &fieldRef | " IN " | %This.FormatInClause(&val, &dataType);
   When "BETWEEN"
      Local array of string &range = Split(&val, "|");
      If &range.Len = 2 Then
         &clause = &fieldRef | " BETWEEN " | %This.FormatSingleValue(&range [1], &dataType, &op) | " AND " | %This.FormatSingleValue(&range [2], &dataType, &op);
      Else
         &clause = "/* ERROR: Invalid BETWEEN format */";
      End-If;
      /* future additions of more operators as needed */
      /* When "IS NULL", "IS NOT NULL"
         When "LIKE"
     
	   */
   When-Other
      &clause = &fieldRef | " " | &op | %This.FormatSingleValue(&paramIndex, &dataType, &op);
      
   End-Evaluate;
   
   Return &clause;
end-method;


/**
 * Formats a comma-separated list of values into an SQL IN clause.
 *
 * This method splits the input string by commas, trims each item,
 * and wraps each formatted value using FormatSingleValue with the "IN" operator.
 * The result is a syntactically correct SQL IN clause string.
 *
 * @param Any &val A comma-separated string of values to include in the IN clause.
 * @param String &dataType The data type of the values ("Date", "Time", "DateTime", or other).
 * @return String A formatted SQL IN clause string.
 */

method FormatInClause
   /+ &val as Any, +/
   /+ &dataType as String +/
   /+ Returns String +/
   
   Local array of string &items;
   Local string &clause = "(";
   Local integer &i;
   
   &items = Split(&val, ",");
   
   For &i = 1 To &items.Len
      &items [&i] = LTrim(RTrim(&items [&i]));
      &clause = &clause | "'" | %This.FormatSingleValue(&items [&i], &dataType, "IN") | "'";
      
      If &i < &items.Len Then
         &clause = &clause | ", ";
      End-If;
   End-For;
   
   &clause = &clause | ")";
   Return &clause;
end-method;



/**
 * Formats a single value for use in dynamic SQL based on its data type and operator.
 *
 * This method returns a formatted string representation of the input value,
 * applying appropriate SQL functions for date, time, or datetime types.
 * If the operator is not "IN", a colon prefix is added to indicate a bind variable.
 *
 * @param Any &val The value to be formatted.
 * @param String &dataType The data type of the value ("Date", "Time", "DateTime", or other).
 * @param String &operator The SQL operator being used (e.g., "=", "IN").
 * @return String The formatted SQL-ready string.
 */

method FormatSingleValue
   /+ &val as Any, +/
   /+ &dataType as String, +/
   /+ &operator as String +/
   /+ Returns String +/
   Local string &colon = "";
   
   If (&operator <> "IN") Then
      &colon = ":";
   End-If;
   
   Evaluate &dataType
   When = "Date"
      Return "%DATEIN(" | &colon | "" | &val | " ) ";
   When = "Time"
      Return "%TIMEIN(" | &colon | "" | &val | " ) ";
   When = "DateTime"
      Return "%DATETIMEIN(" | &colon | "" | &val | " ) ";
   When-Other
      Return "" | &colon | "" | &val;
   End-Evaluate;
end-method;


/**
 * Copies values from the bindValues array into lTempArry.
 *
 * This method iterates through each element in the bindValues array
 * and pushes it into the lTempArry array. It is typically used to
 * prepare bind parameters for dynamic SQL execution.
 *
 * @param Array of Any &bindValues The source array containing values to bind.
 * @param Array of Any &lTempArry The target array that will receive the copied values.
 * @return void
 */


method BuildBindValues
   /+ &bindValues as Array of Any, +/
   /+ &lTempArry as Array of Any +/
   Local integer &k = 1;
   For &k = 1 To &bindValues.Len
      &lTempArry.Push(&bindValues [&k]);
   End-For;
end-method;

